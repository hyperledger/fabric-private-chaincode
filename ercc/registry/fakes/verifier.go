// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/hyperledger/fabric-private-chaincode/internal/protos"
)

type CredentialVerifier struct {
	VerifyCredentialsStub        func(*protos.Credentials, string) error
	verifyCredentialsMutex       sync.RWMutex
	verifyCredentialsArgsForCall []struct {
		arg1 *protos.Credentials
		arg2 string
	}
	verifyCredentialsReturns struct {
		result1 error
	}
	verifyCredentialsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CredentialVerifier) VerifyCredentials(arg1 *protos.Credentials, arg2 string) error {
	fake.verifyCredentialsMutex.Lock()
	ret, specificReturn := fake.verifyCredentialsReturnsOnCall[len(fake.verifyCredentialsArgsForCall)]
	fake.verifyCredentialsArgsForCall = append(fake.verifyCredentialsArgsForCall, struct {
		arg1 *protos.Credentials
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("VerifyCredentials", []interface{}{arg1, arg2})
	fake.verifyCredentialsMutex.Unlock()
	if fake.VerifyCredentialsStub != nil {
		return fake.VerifyCredentialsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.verifyCredentialsReturns
	return fakeReturns.result1
}

func (fake *CredentialVerifier) VerifyCredentialsCallCount() int {
	fake.verifyCredentialsMutex.RLock()
	defer fake.verifyCredentialsMutex.RUnlock()
	return len(fake.verifyCredentialsArgsForCall)
}

func (fake *CredentialVerifier) VerifyCredentialsCalls(stub func(*protos.Credentials, string) error) {
	fake.verifyCredentialsMutex.Lock()
	defer fake.verifyCredentialsMutex.Unlock()
	fake.VerifyCredentialsStub = stub
}

func (fake *CredentialVerifier) VerifyCredentialsArgsForCall(i int) (*protos.Credentials, string) {
	fake.verifyCredentialsMutex.RLock()
	defer fake.verifyCredentialsMutex.RUnlock()
	argsForCall := fake.verifyCredentialsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CredentialVerifier) VerifyCredentialsReturns(result1 error) {
	fake.verifyCredentialsMutex.Lock()
	defer fake.verifyCredentialsMutex.Unlock()
	fake.VerifyCredentialsStub = nil
	fake.verifyCredentialsReturns = struct {
		result1 error
	}{result1}
}

func (fake *CredentialVerifier) VerifyCredentialsReturnsOnCall(i int, result1 error) {
	fake.verifyCredentialsMutex.Lock()
	defer fake.verifyCredentialsMutex.Unlock()
	fake.VerifyCredentialsStub = nil
	if fake.verifyCredentialsReturnsOnCall == nil {
		fake.verifyCredentialsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyCredentialsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CredentialVerifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.verifyCredentialsMutex.RLock()
	defer fake.verifyCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CredentialVerifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
