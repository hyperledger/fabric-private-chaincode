// Copyright IBM Corp. All Rights Reserved.
// Copyright 2020 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: fpc/fpc.proto

package protos

import (
	kvrwset "github.com/hyperledger/fabric-protos-go/ledger/rwset/kvrwset"
	peer "github.com/hyperledger/fabric-protos-go/peer"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CCParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the chaincode
	ChaincodeId string `protobuf:"bytes,1,opt,name=chaincode_id,json=chaincodeId,proto3" json:"chaincode_id,omitempty"`
	// version of chaincode, this is the expected mrenclave
	// encoded as hexstring (as generated by common/enclave/generate_mrenclave.sh)
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// chaincode sequence number
	Sequence int64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// name of channel
	ChannelId string `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *CCParameters) Reset() {
	*x = CCParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCParameters) ProtoMessage() {}

func (x *CCParameters) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCParameters.ProtoReflect.Descriptor instead.
func (*CCParameters) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{0}
}

func (x *CCParameters) GetChaincodeId() string {
	if x != nil {
		return x.ChaincodeId
	}
	return ""
}

func (x *CCParameters) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CCParameters) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *CCParameters) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type HostParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MSP ID of organization hosting (embracing) the peer with corresponding enclave
	// TODO: rename to `creator_msp_id` because this value will be set to the creator's mspid (not the peer's)
	PeerMspId string `protobuf:"bytes,1,opt,name=peer_msp_id,json=peerMspId,proto3" json:"peer_msp_id,omitempty"`
	// the (externally accessible) address of the peer endpoint in format <ip-addr|hostname>:<port-number>
	PeerEndpoint string `protobuf:"bytes,2,opt,name=peer_endpoint,json=peerEndpoint,proto3" json:"peer_endpoint,omitempty"`
	// Post-MVP: This will be a X509 peer certificate on
	// Enclave_VK and CCParameters signed by a CA rooted in
	// the MSP of the Organization hosting the peer running the FPC
	// Chaincode enclave.  This shows the "ownership" of Org for that
	// particular FPC Chaincode enclave.   See additional information in
	// fpc-registration.puml in the 'Org-Enclave binding/certification' group.
	// Note that this field may be moved elsewhere.
	Certificate []byte `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *HostParameters) Reset() {
	*x = HostParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostParameters) ProtoMessage() {}

func (x *HostParameters) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostParameters.ProtoReflect.Descriptor instead.
func (*HostParameters) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{1}
}

func (x *HostParameters) GetPeerMspId() string {
	if x != nil {
		return x.PeerMspId
	}
	return ""
}

func (x *HostParameters) GetPeerEndpoint() string {
	if x != nil {
		return x.PeerEndpoint
	}
	return ""
}

func (x *HostParameters) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type AttestedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CcParams   *CCParameters   `protobuf:"bytes,1,opt,name=cc_params,json=ccParams,proto3" json:"cc_params,omitempty"`
	HostParams *HostParameters `protobuf:"bytes,2,opt,name=host_params,json=hostParams,proto3" json:"host_params,omitempty"`
	// chaincode enclave public key
	EnclaveVk []byte `protobuf:"bytes,3,opt,name=enclave_vk,json=enclaveVk,proto3" json:"enclave_vk,omitempty"`
	// SHA256 hash of the channel genesis block;
	ChannelHash []byte `protobuf:"bytes,4,opt,name=channel_hash,json=channelHash,proto3" json:"channel_hash,omitempty"`
	// expected TLCC mrenclave
	// encoded as hexstring (as generated by common/enclave/generate_mrenclave.sh)
	TlccMrenclave string `protobuf:"bytes,5,opt,name=tlcc_mrenclave,json=tlccMrenclave,proto3" json:"tlcc_mrenclave,omitempty"`
	// chaincode encryption key
	// NOTE: This is a (momentary) short-cut over the FPC and FPC Lite specification in `docs/design/fabric-v2+/fpc-registration.puml` and `docs/design/fabric-v2+/fpc-key-dist.puml`
	ChaincodeEk []byte `protobuf:"bytes,6,opt,name=chaincode_ek,json=chaincodeEk,proto3" json:"chaincode_ek,omitempty"`
}

func (x *AttestedData) Reset() {
	*x = AttestedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestedData) ProtoMessage() {}

func (x *AttestedData) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestedData.ProtoReflect.Descriptor instead.
func (*AttestedData) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{2}
}

func (x *AttestedData) GetCcParams() *CCParameters {
	if x != nil {
		return x.CcParams
	}
	return nil
}

func (x *AttestedData) GetHostParams() *HostParameters {
	if x != nil {
		return x.HostParams
	}
	return nil
}

func (x *AttestedData) GetEnclaveVk() []byte {
	if x != nil {
		return x.EnclaveVk
	}
	return nil
}

func (x *AttestedData) GetChannelHash() []byte {
	if x != nil {
		return x.ChannelHash
	}
	return nil
}

func (x *AttestedData) GetTlccMrenclave() string {
	if x != nil {
		return x.TlccMrenclave
	}
	return ""
}

func (x *AttestedData) GetChaincodeEk() []byte {
	if x != nil {
		return x.ChaincodeEk
	}
	return nil
}

type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// serialization of type **AttestedData**
	SerializedAttestedData *anypb.Any `protobuf:"bytes,1,opt,name=serialized_attested_data,json=serializedAttestedData,proto3" json:"serialized_attested_data,omitempty"`
	// serialized attestation/quote as output by `get_attestatation`, see `interfaces.attestation.md`
	Attestation []byte `protobuf:"bytes,2,opt,name=attestation,proto3" json:"attestation,omitempty"`
	// serialized attestation evidence as output by `AttestationToEvidence`, see `interfaces.attestation.md`
	Evidence []byte `protobuf:"bytes,3,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{3}
}

func (x *Credentials) GetSerializedAttestedData() *anypb.Any {
	if x != nil {
		return x.SerializedAttestedData
	}
	return nil
}

func (x *Credentials) GetAttestation() []byte {
	if x != nil {
		return x.Attestation
	}
	return nil
}

func (x *Credentials) GetEvidence() []byte {
	if x != nil {
		return x.Evidence
	}
	return nil
}

type InitEnclaveMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the (externally accessible) address of the peer endpoint in format <ip-addr|hostname>:<port-number>
	PeerEndpoint string `protobuf:"bytes,1,opt,name=peer_endpoint,json=peerEndpoint,proto3" json:"peer_endpoint,omitempty"`
	// parameters passed for initialization of the attestation API as required by that API
	// (i.e., a base64-encoded json string, see 'interfaces.attestation.md' and 'common/crypto/attestation-api')
	AttestationParams []byte `protobuf:"bytes,2,opt,name=attestation_params,json=attestationParams,proto3" json:"attestation_params,omitempty"`
}

func (x *InitEnclaveMessage) Reset() {
	*x = InitEnclaveMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitEnclaveMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitEnclaveMessage) ProtoMessage() {}

func (x *InitEnclaveMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitEnclaveMessage.ProtoReflect.Descriptor instead.
func (*InitEnclaveMessage) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{4}
}

func (x *InitEnclaveMessage) GetPeerEndpoint() string {
	if x != nil {
		return x.PeerEndpoint
	}
	return ""
}

func (x *InitEnclaveMessage) GetAttestationParams() []byte {
	if x != nil {
		return x.AttestationParams
	}
	return nil
}

type CleartextChaincodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the function and args to invoke
	Input *peer.ChaincodeInput `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *CleartextChaincodeRequest) Reset() {
	*x = CleartextChaincodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleartextChaincodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleartextChaincodeRequest) ProtoMessage() {}

func (x *CleartextChaincodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleartextChaincodeRequest.ProtoReflect.Descriptor instead.
func (*CleartextChaincodeRequest) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{5}
}

func (x *CleartextChaincodeRequest) GetInput() *peer.ChaincodeInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ChaincodeRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// an encryption (symmetric) of the serialization of CleartextChaincodeRequest with KeyTransportMessage.request_encryption_key
	EncryptedRequest []byte `protobuf:"bytes,1,opt,name=encrypted_request,json=encryptedRequest,proto3" json:"encrypted_request,omitempty"`
	// an encryption (asymmetric) of the serialization of request KeyTransportMessage with AttestedData.chaincode_ek
	EncryptedKeyTransportMessage []byte `protobuf:"bytes,2,opt,name=encrypted_key_transport_message,json=encryptedKeyTransportMessage,proto3" json:"encrypted_key_transport_message,omitempty"`
}

func (x *ChaincodeRequestMessage) Reset() {
	*x = ChaincodeRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeRequestMessage) ProtoMessage() {}

func (x *ChaincodeRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeRequestMessage.ProtoReflect.Descriptor instead.
func (*ChaincodeRequestMessage) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{6}
}

func (x *ChaincodeRequestMessage) GetEncryptedRequest() []byte {
	if x != nil {
		return x.EncryptedRequest
	}
	return nil
}

func (x *ChaincodeRequestMessage) GetEncryptedKeyTransportMessage() []byte {
	if x != nil {
		return x.EncryptedKeyTransportMessage
	}
	return nil
}

type KeyTransportMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key to decrypt CleartextChaincodeRequest
	RequestEncryptionKey []byte `protobuf:"bytes,1,opt,name=request_encryption_key,json=requestEncryptionKey,proto3" json:"request_encryption_key,omitempty"`
	// key to encrypt CleartextChaincodeResponse
	ResponseEncryptionKey []byte `protobuf:"bytes,2,opt,name=response_encryption_key,json=responseEncryptionKey,proto3" json:"response_encryption_key,omitempty"`
}

func (x *KeyTransportMessage) Reset() {
	*x = KeyTransportMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyTransportMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyTransportMessage) ProtoMessage() {}

func (x *KeyTransportMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyTransportMessage.ProtoReflect.Descriptor instead.
func (*KeyTransportMessage) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{7}
}

func (x *KeyTransportMessage) GetRequestEncryptionKey() []byte {
	if x != nil {
		return x.RequestEncryptionKey
	}
	return nil
}

func (x *KeyTransportMessage) GetResponseEncryptionKey() []byte {
	if x != nil {
		return x.ResponseEncryptionKey
	}
	return nil
}

type CleartextChaincodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the response of the chaincode invocation
	Response *peer.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CleartextChaincodeResponse) Reset() {
	*x = CleartextChaincodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleartextChaincodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleartextChaincodeResponse) ProtoMessage() {}

func (x *CleartextChaincodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleartextChaincodeResponse.ProtoReflect.Descriptor instead.
func (*CleartextChaincodeResponse) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{8}
}

func (x *CleartextChaincodeResponse) GetResponse() *peer.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// FPCKVSet augments the Fabric kvrwset.KVRWSet protobuf to include the hash of the value of each read.
// Specifically, read_value_hashes[i] is the hash of the value associated to rw_set.reads[i].key
type FPCKVSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RwSet           *kvrwset.KVRWSet `protobuf:"bytes,1,opt,name=rw_set,json=rwSet,proto3" json:"rw_set,omitempty"`
	ReadValueHashes [][]byte         `protobuf:"bytes,2,rep,name=read_value_hashes,json=readValueHashes,proto3" json:"read_value_hashes,omitempty"`
}

func (x *FPCKVSet) Reset() {
	*x = FPCKVSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FPCKVSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FPCKVSet) ProtoMessage() {}

func (x *FPCKVSet) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FPCKVSet.ProtoReflect.Descriptor instead.
func (*FPCKVSet) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{9}
}

func (x *FPCKVSet) GetRwSet() *kvrwset.KVRWSet {
	if x != nil {
		return x.RwSet
	}
	return nil
}

func (x *FPCKVSet) GetReadValueHashes() [][]byte {
	if x != nil {
		return x.ReadValueHashes
	}
	return nil
}

type ChaincodeResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// an encryption (symmetric) of the serialization of CleartextChaincodeRequest with KeyTransportMessage.response_encryption_key
	EncryptedResponse []byte `protobuf:"bytes,1,opt,name=encrypted_response,json=encryptedResponse,proto3" json:"encrypted_response,omitempty"`
	// R/W set (of cleartext keys but encrypted values)
	// This field is only valid for the FPC Lite variant but absent from the full version with in-peer FPC validation
	FpcRwSet *FPCKVSet `protobuf:"bytes,2,opt,name=fpc_rw_set,json=fpcRwSet,proto3" json:"fpc_rw_set,omitempty"`
	// signed proposal for this request
	Proposal *peer.SignedProposal `protobuf:"bytes,3,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// hash of the proposal's input request
	// this field is required because input request is passed alongside the proposal
	// and not extracted from it; validation chaincode will check for consistency
	ChaincodeRequestMessageHash []byte `protobuf:"bytes,4,opt,name=chaincode_request_message_hash,json=chaincodeRequestMessageHash,proto3" json:"chaincode_request_message_hash,omitempty"`
	// identity for public key used to sign
	EnclaveId string `protobuf:"bytes,5,opt,name=enclave_id,json=enclaveId,proto3" json:"enclave_id,omitempty"`
}

func (x *ChaincodeResponseMessage) Reset() {
	*x = ChaincodeResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeResponseMessage) ProtoMessage() {}

func (x *ChaincodeResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeResponseMessage.ProtoReflect.Descriptor instead.
func (*ChaincodeResponseMessage) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{10}
}

func (x *ChaincodeResponseMessage) GetEncryptedResponse() []byte {
	if x != nil {
		return x.EncryptedResponse
	}
	return nil
}

func (x *ChaincodeResponseMessage) GetFpcRwSet() *FPCKVSet {
	if x != nil {
		return x.FpcRwSet
	}
	return nil
}

func (x *ChaincodeResponseMessage) GetProposal() *peer.SignedProposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *ChaincodeResponseMessage) GetChaincodeRequestMessageHash() []byte {
	if x != nil {
		return x.ChaincodeRequestMessageHash
	}
	return nil
}

func (x *ChaincodeResponseMessage) GetEnclaveId() string {
	if x != nil {
		return x.EnclaveId
	}
	return ""
}

type SignedChaincodeResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// binary encoding of a ChaincodeResponseMessage protobuf
	ChaincodeResponseMessage []byte `protobuf:"bytes,1,opt,name=chaincode_response_message,json=chaincodeResponseMessage,proto3" json:"chaincode_response_message,omitempty"`
	// signature over the chaincode response message
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedChaincodeResponseMessage) Reset() {
	*x = SignedChaincodeResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpc_fpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedChaincodeResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedChaincodeResponseMessage) ProtoMessage() {}

func (x *SignedChaincodeResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_fpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedChaincodeResponseMessage.ProtoReflect.Descriptor instead.
func (*SignedChaincodeResponseMessage) Descriptor() ([]byte, []int) {
	return file_fpc_fpc_proto_rawDescGZIP(), []int{11}
}

func (x *SignedChaincodeResponseMessage) GetChaincodeResponseMessage() []byte {
	if x != nil {
		return x.ChaincodeResponseMessage
	}
	return nil
}

func (x *SignedChaincodeResponseMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_fpc_fpc_proto protoreflect.FileDescriptor

var file_fpc_fpc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x70, 0x63, 0x2f, 0x66, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x66, 0x70, 0x63, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x65, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x72, 0x77, 0x73, 0x65, 0x74, 0x2f, 0x6b, 0x76, 0x72, 0x77, 0x73, 0x65, 0x74, 0x2f, 0x6b,
	0x76, 0x5f, 0x72, 0x77, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x01,
	0x0a, 0x0c, 0x43, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x4d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x65, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22,
	0x80, 0x02, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x09, 0x63, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x70, 0x63, 0x2e, 0x43, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x34, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x5f, 0x76, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x76, 0x65, 0x56, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6c, 0x63, 0x63,
	0x5f, 0x6d, 0x72, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x6c, 0x63, 0x63, 0x4d, 0x72, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x45, 0x6b, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x16, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0x68, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x65, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x49, 0x0a, 0x19, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x74, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x1f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x4a, 0x0a, 0x1a, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x74, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x08, 0x46, 0x50, 0x43, 0x4b, 0x56,
	0x53, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x77, 0x73, 0x65, 0x74, 0x2e, 0x4b, 0x56,
	0x52, 0x57, 0x53, 0x65, 0x74, 0x52, 0x05, 0x72, 0x77, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x18, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x66, 0x70, 0x63, 0x5f, 0x72, 0x77, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x70, 0x63, 0x2e, 0x46,
	0x50, 0x43, 0x4b, 0x56, 0x53, 0x65, 0x74, 0x52, 0x08, 0x66, 0x70, 0x63, 0x52, 0x77, 0x53, 0x65,
	0x74, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x1e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x18, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_fpc_fpc_proto_rawDescOnce sync.Once
	file_fpc_fpc_proto_rawDescData = file_fpc_fpc_proto_rawDesc
)

func file_fpc_fpc_proto_rawDescGZIP() []byte {
	file_fpc_fpc_proto_rawDescOnce.Do(func() {
		file_fpc_fpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_fpc_fpc_proto_rawDescData)
	})
	return file_fpc_fpc_proto_rawDescData
}

var file_fpc_fpc_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_fpc_fpc_proto_goTypes = []interface{}{
	(*CCParameters)(nil),                   // 0: fpc.CCParameters
	(*HostParameters)(nil),                 // 1: fpc.HostParameters
	(*AttestedData)(nil),                   // 2: fpc.AttestedData
	(*Credentials)(nil),                    // 3: fpc.Credentials
	(*InitEnclaveMessage)(nil),             // 4: fpc.InitEnclaveMessage
	(*CleartextChaincodeRequest)(nil),      // 5: fpc.CleartextChaincodeRequest
	(*ChaincodeRequestMessage)(nil),        // 6: fpc.ChaincodeRequestMessage
	(*KeyTransportMessage)(nil),            // 7: fpc.KeyTransportMessage
	(*CleartextChaincodeResponse)(nil),     // 8: fpc.CleartextChaincodeResponse
	(*FPCKVSet)(nil),                       // 9: fpc.FPCKVSet
	(*ChaincodeResponseMessage)(nil),       // 10: fpc.ChaincodeResponseMessage
	(*SignedChaincodeResponseMessage)(nil), // 11: fpc.SignedChaincodeResponseMessage
	(*anypb.Any)(nil),                      // 12: google.protobuf.Any
	(*peer.ChaincodeInput)(nil),            // 13: protos.ChaincodeInput
	(*peer.Response)(nil),                  // 14: protos.Response
	(*kvrwset.KVRWSet)(nil),                // 15: kvrwset.KVRWSet
	(*peer.SignedProposal)(nil),            // 16: protos.SignedProposal
}
var file_fpc_fpc_proto_depIdxs = []int32{
	0,  // 0: fpc.AttestedData.cc_params:type_name -> fpc.CCParameters
	1,  // 1: fpc.AttestedData.host_params:type_name -> fpc.HostParameters
	12, // 2: fpc.Credentials.serialized_attested_data:type_name -> google.protobuf.Any
	13, // 3: fpc.CleartextChaincodeRequest.input:type_name -> protos.ChaincodeInput
	14, // 4: fpc.CleartextChaincodeResponse.response:type_name -> protos.Response
	15, // 5: fpc.FPCKVSet.rw_set:type_name -> kvrwset.KVRWSet
	9,  // 6: fpc.ChaincodeResponseMessage.fpc_rw_set:type_name -> fpc.FPCKVSet
	16, // 7: fpc.ChaincodeResponseMessage.proposal:type_name -> protos.SignedProposal
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_fpc_fpc_proto_init() }
func file_fpc_fpc_proto_init() {
	if File_fpc_fpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fpc_fpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpc_fpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpc_fpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpc_fpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpc_fpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitEnclaveMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpc_fpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleartextChaincodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpc_fpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpc_fpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyTransportMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpc_fpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleartextChaincodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpc_fpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FPCKVSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpc_fpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpc_fpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedChaincodeResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fpc_fpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fpc_fpc_proto_goTypes,
		DependencyIndexes: file_fpc_fpc_proto_depIdxs,
		MessageInfos:      file_fpc_fpc_proto_msgTypes,
	}.Build()
	File_fpc_fpc_proto = out.File
	file_fpc_fpc_proto_rawDesc = nil
	file_fpc_fpc_proto_goTypes = nil
	file_fpc_fpc_proto_depIdxs = nil
}
