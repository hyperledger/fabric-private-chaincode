// Copyright IBM Corp. All Rights Reserved.
// Copyright 2020 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.22.3
// source: fpc/key_dist.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CCKeyRegistrationMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// defines the context as SHA256 of cc_params
	CcParamsHash []byte `protobuf:"bytes,1,opt,name=cc_params_hash,json=ccParamsHash,proto3" json:"cc_params_hash,omitempty"`
	// public chaincode encryption key
	ChaincodeEk []byte `protobuf:"bytes,2,opt,name=chaincode_ek,json=chaincodeEk,proto3" json:"chaincode_ek,omitempty"`
	// creator of this message
	// enclave_id is the SHA256 hash of enclave_vk
	EnclaveId     []byte `protobuf:"bytes,3,opt,name=enclave_id,json=enclaveId,proto3" json:"enclave_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCKeyRegistrationMessage) Reset() {
	*x = CCKeyRegistrationMessage{}
	mi := &file_fpc_key_dist_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCKeyRegistrationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCKeyRegistrationMessage) ProtoMessage() {}

func (x *CCKeyRegistrationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_key_dist_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCKeyRegistrationMessage.ProtoReflect.Descriptor instead.
func (*CCKeyRegistrationMessage) Descriptor() ([]byte, []int) {
	return file_fpc_key_dist_proto_rawDescGZIP(), []int{0}
}

func (x *CCKeyRegistrationMessage) GetCcParamsHash() []byte {
	if x != nil {
		return x.CcParamsHash
	}
	return nil
}

func (x *CCKeyRegistrationMessage) GetChaincodeEk() []byte {
	if x != nil {
		return x.ChaincodeEk
	}
	return nil
}

func (x *CCKeyRegistrationMessage) GetEnclaveId() []byte {
	if x != nil {
		return x.EnclaveId
	}
	return nil
}

type SignedCCKeyRegistrationMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// serialization of type CCKeyRegistrationMessage
	SerializedCckeyRegMsg *anypb.Any `protobuf:"bytes,1,opt,name=serialized_cckey_reg_msg,json=serializedCckeyRegMsg,proto3" json:"serialized_cckey_reg_msg,omitempty"`
	// signature of the message creator (enclave)
	Signature     []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedCCKeyRegistrationMessage) Reset() {
	*x = SignedCCKeyRegistrationMessage{}
	mi := &file_fpc_key_dist_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedCCKeyRegistrationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedCCKeyRegistrationMessage) ProtoMessage() {}

func (x *SignedCCKeyRegistrationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_key_dist_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedCCKeyRegistrationMessage.ProtoReflect.Descriptor instead.
func (*SignedCCKeyRegistrationMessage) Descriptor() ([]byte, []int) {
	return file_fpc_key_dist_proto_rawDescGZIP(), []int{1}
}

func (x *SignedCCKeyRegistrationMessage) GetSerializedCckeyRegMsg() *anypb.Any {
	if x != nil {
		return x.SerializedCckeyRegMsg
	}
	return nil
}

func (x *SignedCCKeyRegistrationMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ExportMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// defines the context of this export message as SHA256 of cc_params
	CcParamsHash []byte `protobuf:"bytes,1,opt,name=cc_params_hash,json=ccParamsHash,proto3" json:"cc_params_hash,omitempty"`
	// public chaincode encryption key
	ChaincodeEk []byte `protobuf:"bytes,2,opt,name=chaincode_ek,json=chaincodeEk,proto3" json:"chaincode_ek,omitempty"`
	// chaincode keys encrypted for the receiver
	CckeysEnc []byte `protobuf:"bytes,3,opt,name=cckeys_enc,json=cckeysEnc,proto3" json:"cckeys_enc,omitempty"`
	// receiver of this export message
	ReceiverEnclaveVk []byte `protobuf:"bytes,4,opt,name=receiver_enclave_vk,json=receiverEnclaveVk,proto3" json:"receiver_enclave_vk,omitempty"`
	// sender (creator) of this export message
	SenderEnclaveVk []byte `protobuf:"bytes,5,opt,name=sender_enclave_vk,json=senderEnclaveVk,proto3" json:"sender_enclave_vk,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExportMessage) Reset() {
	*x = ExportMessage{}
	mi := &file_fpc_key_dist_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMessage) ProtoMessage() {}

func (x *ExportMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_key_dist_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMessage.ProtoReflect.Descriptor instead.
func (*ExportMessage) Descriptor() ([]byte, []int) {
	return file_fpc_key_dist_proto_rawDescGZIP(), []int{2}
}

func (x *ExportMessage) GetCcParamsHash() []byte {
	if x != nil {
		return x.CcParamsHash
	}
	return nil
}

func (x *ExportMessage) GetChaincodeEk() []byte {
	if x != nil {
		return x.ChaincodeEk
	}
	return nil
}

func (x *ExportMessage) GetCckeysEnc() []byte {
	if x != nil {
		return x.CckeysEnc
	}
	return nil
}

func (x *ExportMessage) GetReceiverEnclaveVk() []byte {
	if x != nil {
		return x.ReceiverEnclaveVk
	}
	return nil
}

func (x *ExportMessage) GetSenderEnclaveVk() []byte {
	if x != nil {
		return x.SenderEnclaveVk
	}
	return nil
}

type SignedExportMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// serialization of type ExportMessage
	SerializedExportMsgBytes *anypb.Any `protobuf:"bytes,1,opt,name=serialized_export_msg_bytes,json=serializedExportMsgBytes,proto3" json:"serialized_export_msg_bytes,omitempty"`
	// signature of the message creator
	Signature     []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedExportMessage) Reset() {
	*x = SignedExportMessage{}
	mi := &file_fpc_key_dist_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedExportMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedExportMessage) ProtoMessage() {}

func (x *SignedExportMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fpc_key_dist_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedExportMessage.ProtoReflect.Descriptor instead.
func (*SignedExportMessage) Descriptor() ([]byte, []int) {
	return file_fpc_key_dist_proto_rawDescGZIP(), []int{3}
}

func (x *SignedExportMessage) GetSerializedExportMsgBytes() *anypb.Any {
	if x != nil {
		return x.SerializedExportMsgBytes
	}
	return nil
}

func (x *SignedExportMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_fpc_key_dist_proto protoreflect.FileDescriptor

const file_fpc_key_dist_proto_rawDesc = "" +
	"\n" +
	"\x12fpc/key_dist.proto\x12\x10key_distribution\x1a\x19google/protobuf/any.proto\"\x82\x01\n" +
	"\x18CCKeyRegistrationMessage\x12$\n" +
	"\x0ecc_params_hash\x18\x01 \x01(\fR\fccParamsHash\x12!\n" +
	"\fchaincode_ek\x18\x02 \x01(\fR\vchaincodeEk\x12\x1d\n" +
	"\n" +
	"enclave_id\x18\x03 \x01(\fR\tenclaveId\"\x8d\x01\n" +
	"\x1eSignedCCKeyRegistrationMessage\x12M\n" +
	"\x18serialized_cckey_reg_msg\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\x15serializedCckeyRegMsg\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\"\xd3\x01\n" +
	"\rExportMessage\x12$\n" +
	"\x0ecc_params_hash\x18\x01 \x01(\fR\fccParamsHash\x12!\n" +
	"\fchaincode_ek\x18\x02 \x01(\fR\vchaincodeEk\x12\x1d\n" +
	"\n" +
	"cckeys_enc\x18\x03 \x01(\fR\tcckeysEnc\x12.\n" +
	"\x13receiver_enclave_vk\x18\x04 \x01(\fR\x11receiverEnclaveVk\x12*\n" +
	"\x11sender_enclave_vk\x18\x05 \x01(\fR\x0fsenderEnclaveVk\"\x88\x01\n" +
	"\x13SignedExportMessage\x12S\n" +
	"\x1bserialized_export_msg_bytes\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\x18serializedExportMsgBytes\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignatureBAZ?github.com/hyperledger/fabric-private-chaincode/internal/protosb\x06proto3"

var (
	file_fpc_key_dist_proto_rawDescOnce sync.Once
	file_fpc_key_dist_proto_rawDescData []byte
)

func file_fpc_key_dist_proto_rawDescGZIP() []byte {
	file_fpc_key_dist_proto_rawDescOnce.Do(func() {
		file_fpc_key_dist_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fpc_key_dist_proto_rawDesc), len(file_fpc_key_dist_proto_rawDesc)))
	})
	return file_fpc_key_dist_proto_rawDescData
}

var file_fpc_key_dist_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_fpc_key_dist_proto_goTypes = []any{
	(*CCKeyRegistrationMessage)(nil),       // 0: key_distribution.CCKeyRegistrationMessage
	(*SignedCCKeyRegistrationMessage)(nil), // 1: key_distribution.SignedCCKeyRegistrationMessage
	(*ExportMessage)(nil),                  // 2: key_distribution.ExportMessage
	(*SignedExportMessage)(nil),            // 3: key_distribution.SignedExportMessage
	(*anypb.Any)(nil),                      // 4: google.protobuf.Any
}
var file_fpc_key_dist_proto_depIdxs = []int32{
	4, // 0: key_distribution.SignedCCKeyRegistrationMessage.serialized_cckey_reg_msg:type_name -> google.protobuf.Any
	4, // 1: key_distribution.SignedExportMessage.serialized_export_msg_bytes:type_name -> google.protobuf.Any
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_fpc_key_dist_proto_init() }
func file_fpc_key_dist_proto_init() {
	if File_fpc_key_dist_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fpc_key_dist_proto_rawDesc), len(file_fpc_key_dist_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fpc_key_dist_proto_goTypes,
		DependencyIndexes: file_fpc_key_dist_proto_depIdxs,
		MessageInfos:      file_fpc_key_dist_proto_msgTypes,
	}.Build()
	File_fpc_key_dist_proto = out.File
	file_fpc_key_dist_proto_goTypes = nil
	file_fpc_key_dist_proto_depIdxs = nil
}
