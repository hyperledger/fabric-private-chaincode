// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/hyperledger/fabric-chaincode-go/shim"
	"github.com/hyperledger/fabric-private-chaincode/internal/protos"
)

type Extractors struct {
	GetChaincodeParamsStub        func(shim.ChaincodeStubInterface) (*protos.CCParameters, error)
	getChaincodeParamsMutex       sync.RWMutex
	getChaincodeParamsArgsForCall []struct {
		arg1 shim.ChaincodeStubInterface
	}
	getChaincodeParamsReturns struct {
		result1 *protos.CCParameters
		result2 error
	}
	getChaincodeParamsReturnsOnCall map[int]struct {
		result1 *protos.CCParameters
		result2 error
	}
	GetChaincodeResponseMessagesStub        func(shim.ChaincodeStubInterface) (*protos.SignedChaincodeResponseMessage, *protos.ChaincodeResponseMessage, error)
	getChaincodeResponseMessagesMutex       sync.RWMutex
	getChaincodeResponseMessagesArgsForCall []struct {
		arg1 shim.ChaincodeStubInterface
	}
	getChaincodeResponseMessagesReturns struct {
		result1 *protos.SignedChaincodeResponseMessage
		result2 *protos.ChaincodeResponseMessage
		result3 error
	}
	getChaincodeResponseMessagesReturnsOnCall map[int]struct {
		result1 *protos.SignedChaincodeResponseMessage
		result2 *protos.ChaincodeResponseMessage
		result3 error
	}
	GetHostParamsStub        func(shim.ChaincodeStubInterface) (*protos.HostParameters, error)
	getHostParamsMutex       sync.RWMutex
	getHostParamsArgsForCall []struct {
		arg1 shim.ChaincodeStubInterface
	}
	getHostParamsReturns struct {
		result1 *protos.HostParameters
		result2 error
	}
	getHostParamsReturnsOnCall map[int]struct {
		result1 *protos.HostParameters
		result2 error
	}
	GetInitEnclaveMessageStub        func(shim.ChaincodeStubInterface) (*protos.InitEnclaveMessage, error)
	getInitEnclaveMessageMutex       sync.RWMutex
	getInitEnclaveMessageArgsForCall []struct {
		arg1 shim.ChaincodeStubInterface
	}
	getInitEnclaveMessageReturns struct {
		result1 *protos.InitEnclaveMessage
		result2 error
	}
	getInitEnclaveMessageReturnsOnCall map[int]struct {
		result1 *protos.InitEnclaveMessage
		result2 error
	}
	GetSerializedChaincodeRequestStub        func(shim.ChaincodeStubInterface) ([]byte, error)
	getSerializedChaincodeRequestMutex       sync.RWMutex
	getSerializedChaincodeRequestArgsForCall []struct {
		arg1 shim.ChaincodeStubInterface
	}
	getSerializedChaincodeRequestReturns struct {
		result1 []byte
		result2 error
	}
	getSerializedChaincodeRequestReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Extractors) GetChaincodeParams(arg1 shim.ChaincodeStubInterface) (*protos.CCParameters, error) {
	fake.getChaincodeParamsMutex.Lock()
	ret, specificReturn := fake.getChaincodeParamsReturnsOnCall[len(fake.getChaincodeParamsArgsForCall)]
	fake.getChaincodeParamsArgsForCall = append(fake.getChaincodeParamsArgsForCall, struct {
		arg1 shim.ChaincodeStubInterface
	}{arg1})
	stub := fake.GetChaincodeParamsStub
	fakeReturns := fake.getChaincodeParamsReturns
	fake.recordInvocation("GetChaincodeParams", []interface{}{arg1})
	fake.getChaincodeParamsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Extractors) GetChaincodeParamsCallCount() int {
	fake.getChaincodeParamsMutex.RLock()
	defer fake.getChaincodeParamsMutex.RUnlock()
	return len(fake.getChaincodeParamsArgsForCall)
}

func (fake *Extractors) GetChaincodeParamsCalls(stub func(shim.ChaincodeStubInterface) (*protos.CCParameters, error)) {
	fake.getChaincodeParamsMutex.Lock()
	defer fake.getChaincodeParamsMutex.Unlock()
	fake.GetChaincodeParamsStub = stub
}

func (fake *Extractors) GetChaincodeParamsArgsForCall(i int) shim.ChaincodeStubInterface {
	fake.getChaincodeParamsMutex.RLock()
	defer fake.getChaincodeParamsMutex.RUnlock()
	argsForCall := fake.getChaincodeParamsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Extractors) GetChaincodeParamsReturns(result1 *protos.CCParameters, result2 error) {
	fake.getChaincodeParamsMutex.Lock()
	defer fake.getChaincodeParamsMutex.Unlock()
	fake.GetChaincodeParamsStub = nil
	fake.getChaincodeParamsReturns = struct {
		result1 *protos.CCParameters
		result2 error
	}{result1, result2}
}

func (fake *Extractors) GetChaincodeParamsReturnsOnCall(i int, result1 *protos.CCParameters, result2 error) {
	fake.getChaincodeParamsMutex.Lock()
	defer fake.getChaincodeParamsMutex.Unlock()
	fake.GetChaincodeParamsStub = nil
	if fake.getChaincodeParamsReturnsOnCall == nil {
		fake.getChaincodeParamsReturnsOnCall = make(map[int]struct {
			result1 *protos.CCParameters
			result2 error
		})
	}
	fake.getChaincodeParamsReturnsOnCall[i] = struct {
		result1 *protos.CCParameters
		result2 error
	}{result1, result2}
}

func (fake *Extractors) GetChaincodeResponseMessages(arg1 shim.ChaincodeStubInterface) (*protos.SignedChaincodeResponseMessage, *protos.ChaincodeResponseMessage, error) {
	fake.getChaincodeResponseMessagesMutex.Lock()
	ret, specificReturn := fake.getChaincodeResponseMessagesReturnsOnCall[len(fake.getChaincodeResponseMessagesArgsForCall)]
	fake.getChaincodeResponseMessagesArgsForCall = append(fake.getChaincodeResponseMessagesArgsForCall, struct {
		arg1 shim.ChaincodeStubInterface
	}{arg1})
	stub := fake.GetChaincodeResponseMessagesStub
	fakeReturns := fake.getChaincodeResponseMessagesReturns
	fake.recordInvocation("GetChaincodeResponseMessages", []interface{}{arg1})
	fake.getChaincodeResponseMessagesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *Extractors) GetChaincodeResponseMessagesCallCount() int {
	fake.getChaincodeResponseMessagesMutex.RLock()
	defer fake.getChaincodeResponseMessagesMutex.RUnlock()
	return len(fake.getChaincodeResponseMessagesArgsForCall)
}

func (fake *Extractors) GetChaincodeResponseMessagesCalls(stub func(shim.ChaincodeStubInterface) (*protos.SignedChaincodeResponseMessage, *protos.ChaincodeResponseMessage, error)) {
	fake.getChaincodeResponseMessagesMutex.Lock()
	defer fake.getChaincodeResponseMessagesMutex.Unlock()
	fake.GetChaincodeResponseMessagesStub = stub
}

func (fake *Extractors) GetChaincodeResponseMessagesArgsForCall(i int) shim.ChaincodeStubInterface {
	fake.getChaincodeResponseMessagesMutex.RLock()
	defer fake.getChaincodeResponseMessagesMutex.RUnlock()
	argsForCall := fake.getChaincodeResponseMessagesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Extractors) GetChaincodeResponseMessagesReturns(result1 *protos.SignedChaincodeResponseMessage, result2 *protos.ChaincodeResponseMessage, result3 error) {
	fake.getChaincodeResponseMessagesMutex.Lock()
	defer fake.getChaincodeResponseMessagesMutex.Unlock()
	fake.GetChaincodeResponseMessagesStub = nil
	fake.getChaincodeResponseMessagesReturns = struct {
		result1 *protos.SignedChaincodeResponseMessage
		result2 *protos.ChaincodeResponseMessage
		result3 error
	}{result1, result2, result3}
}

func (fake *Extractors) GetChaincodeResponseMessagesReturnsOnCall(i int, result1 *protos.SignedChaincodeResponseMessage, result2 *protos.ChaincodeResponseMessage, result3 error) {
	fake.getChaincodeResponseMessagesMutex.Lock()
	defer fake.getChaincodeResponseMessagesMutex.Unlock()
	fake.GetChaincodeResponseMessagesStub = nil
	if fake.getChaincodeResponseMessagesReturnsOnCall == nil {
		fake.getChaincodeResponseMessagesReturnsOnCall = make(map[int]struct {
			result1 *protos.SignedChaincodeResponseMessage
			result2 *protos.ChaincodeResponseMessage
			result3 error
		})
	}
	fake.getChaincodeResponseMessagesReturnsOnCall[i] = struct {
		result1 *protos.SignedChaincodeResponseMessage
		result2 *protos.ChaincodeResponseMessage
		result3 error
	}{result1, result2, result3}
}

func (fake *Extractors) GetHostParams(arg1 shim.ChaincodeStubInterface) (*protos.HostParameters, error) {
	fake.getHostParamsMutex.Lock()
	ret, specificReturn := fake.getHostParamsReturnsOnCall[len(fake.getHostParamsArgsForCall)]
	fake.getHostParamsArgsForCall = append(fake.getHostParamsArgsForCall, struct {
		arg1 shim.ChaincodeStubInterface
	}{arg1})
	stub := fake.GetHostParamsStub
	fakeReturns := fake.getHostParamsReturns
	fake.recordInvocation("GetHostParams", []interface{}{arg1})
	fake.getHostParamsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Extractors) GetHostParamsCallCount() int {
	fake.getHostParamsMutex.RLock()
	defer fake.getHostParamsMutex.RUnlock()
	return len(fake.getHostParamsArgsForCall)
}

func (fake *Extractors) GetHostParamsCalls(stub func(shim.ChaincodeStubInterface) (*protos.HostParameters, error)) {
	fake.getHostParamsMutex.Lock()
	defer fake.getHostParamsMutex.Unlock()
	fake.GetHostParamsStub = stub
}

func (fake *Extractors) GetHostParamsArgsForCall(i int) shim.ChaincodeStubInterface {
	fake.getHostParamsMutex.RLock()
	defer fake.getHostParamsMutex.RUnlock()
	argsForCall := fake.getHostParamsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Extractors) GetHostParamsReturns(result1 *protos.HostParameters, result2 error) {
	fake.getHostParamsMutex.Lock()
	defer fake.getHostParamsMutex.Unlock()
	fake.GetHostParamsStub = nil
	fake.getHostParamsReturns = struct {
		result1 *protos.HostParameters
		result2 error
	}{result1, result2}
}

func (fake *Extractors) GetHostParamsReturnsOnCall(i int, result1 *protos.HostParameters, result2 error) {
	fake.getHostParamsMutex.Lock()
	defer fake.getHostParamsMutex.Unlock()
	fake.GetHostParamsStub = nil
	if fake.getHostParamsReturnsOnCall == nil {
		fake.getHostParamsReturnsOnCall = make(map[int]struct {
			result1 *protos.HostParameters
			result2 error
		})
	}
	fake.getHostParamsReturnsOnCall[i] = struct {
		result1 *protos.HostParameters
		result2 error
	}{result1, result2}
}

func (fake *Extractors) GetInitEnclaveMessage(arg1 shim.ChaincodeStubInterface) (*protos.InitEnclaveMessage, error) {
	fake.getInitEnclaveMessageMutex.Lock()
	ret, specificReturn := fake.getInitEnclaveMessageReturnsOnCall[len(fake.getInitEnclaveMessageArgsForCall)]
	fake.getInitEnclaveMessageArgsForCall = append(fake.getInitEnclaveMessageArgsForCall, struct {
		arg1 shim.ChaincodeStubInterface
	}{arg1})
	stub := fake.GetInitEnclaveMessageStub
	fakeReturns := fake.getInitEnclaveMessageReturns
	fake.recordInvocation("GetInitEnclaveMessage", []interface{}{arg1})
	fake.getInitEnclaveMessageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Extractors) GetInitEnclaveMessageCallCount() int {
	fake.getInitEnclaveMessageMutex.RLock()
	defer fake.getInitEnclaveMessageMutex.RUnlock()
	return len(fake.getInitEnclaveMessageArgsForCall)
}

func (fake *Extractors) GetInitEnclaveMessageCalls(stub func(shim.ChaincodeStubInterface) (*protos.InitEnclaveMessage, error)) {
	fake.getInitEnclaveMessageMutex.Lock()
	defer fake.getInitEnclaveMessageMutex.Unlock()
	fake.GetInitEnclaveMessageStub = stub
}

func (fake *Extractors) GetInitEnclaveMessageArgsForCall(i int) shim.ChaincodeStubInterface {
	fake.getInitEnclaveMessageMutex.RLock()
	defer fake.getInitEnclaveMessageMutex.RUnlock()
	argsForCall := fake.getInitEnclaveMessageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Extractors) GetInitEnclaveMessageReturns(result1 *protos.InitEnclaveMessage, result2 error) {
	fake.getInitEnclaveMessageMutex.Lock()
	defer fake.getInitEnclaveMessageMutex.Unlock()
	fake.GetInitEnclaveMessageStub = nil
	fake.getInitEnclaveMessageReturns = struct {
		result1 *protos.InitEnclaveMessage
		result2 error
	}{result1, result2}
}

func (fake *Extractors) GetInitEnclaveMessageReturnsOnCall(i int, result1 *protos.InitEnclaveMessage, result2 error) {
	fake.getInitEnclaveMessageMutex.Lock()
	defer fake.getInitEnclaveMessageMutex.Unlock()
	fake.GetInitEnclaveMessageStub = nil
	if fake.getInitEnclaveMessageReturnsOnCall == nil {
		fake.getInitEnclaveMessageReturnsOnCall = make(map[int]struct {
			result1 *protos.InitEnclaveMessage
			result2 error
		})
	}
	fake.getInitEnclaveMessageReturnsOnCall[i] = struct {
		result1 *protos.InitEnclaveMessage
		result2 error
	}{result1, result2}
}

func (fake *Extractors) GetSerializedChaincodeRequest(arg1 shim.ChaincodeStubInterface) ([]byte, error) {
	fake.getSerializedChaincodeRequestMutex.Lock()
	ret, specificReturn := fake.getSerializedChaincodeRequestReturnsOnCall[len(fake.getSerializedChaincodeRequestArgsForCall)]
	fake.getSerializedChaincodeRequestArgsForCall = append(fake.getSerializedChaincodeRequestArgsForCall, struct {
		arg1 shim.ChaincodeStubInterface
	}{arg1})
	stub := fake.GetSerializedChaincodeRequestStub
	fakeReturns := fake.getSerializedChaincodeRequestReturns
	fake.recordInvocation("GetSerializedChaincodeRequest", []interface{}{arg1})
	fake.getSerializedChaincodeRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Extractors) GetSerializedChaincodeRequestCallCount() int {
	fake.getSerializedChaincodeRequestMutex.RLock()
	defer fake.getSerializedChaincodeRequestMutex.RUnlock()
	return len(fake.getSerializedChaincodeRequestArgsForCall)
}

func (fake *Extractors) GetSerializedChaincodeRequestCalls(stub func(shim.ChaincodeStubInterface) ([]byte, error)) {
	fake.getSerializedChaincodeRequestMutex.Lock()
	defer fake.getSerializedChaincodeRequestMutex.Unlock()
	fake.GetSerializedChaincodeRequestStub = stub
}

func (fake *Extractors) GetSerializedChaincodeRequestArgsForCall(i int) shim.ChaincodeStubInterface {
	fake.getSerializedChaincodeRequestMutex.RLock()
	defer fake.getSerializedChaincodeRequestMutex.RUnlock()
	argsForCall := fake.getSerializedChaincodeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Extractors) GetSerializedChaincodeRequestReturns(result1 []byte, result2 error) {
	fake.getSerializedChaincodeRequestMutex.Lock()
	defer fake.getSerializedChaincodeRequestMutex.Unlock()
	fake.GetSerializedChaincodeRequestStub = nil
	fake.getSerializedChaincodeRequestReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Extractors) GetSerializedChaincodeRequestReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getSerializedChaincodeRequestMutex.Lock()
	defer fake.getSerializedChaincodeRequestMutex.Unlock()
	fake.GetSerializedChaincodeRequestStub = nil
	if fake.getSerializedChaincodeRequestReturnsOnCall == nil {
		fake.getSerializedChaincodeRequestReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getSerializedChaincodeRequestReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Extractors) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getChaincodeParamsMutex.RLock()
	defer fake.getChaincodeParamsMutex.RUnlock()
	fake.getChaincodeResponseMessagesMutex.RLock()
	defer fake.getChaincodeResponseMessagesMutex.RUnlock()
	fake.getHostParamsMutex.RLock()
	defer fake.getHostParamsMutex.RUnlock()
	fake.getInitEnclaveMessageMutex.RLock()
	defer fake.getInitEnclaveMessageMutex.RUnlock()
	fake.getSerializedChaincodeRequestMutex.RLock()
	defer fake.getSerializedChaincodeRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Extractors) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
