// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/hyperledger/fabric-chaincode-go/shim"
	"github.com/hyperledger/fabric-private-chaincode/internal/protos"
)

type Validator struct {
	ReplayReadWritesStub        func(shim.ChaincodeStubInterface, *protos.FPCKVSet) error
	replayReadWritesMutex       sync.RWMutex
	replayReadWritesArgsForCall []struct {
		arg1 shim.ChaincodeStubInterface
		arg2 *protos.FPCKVSet
	}
	replayReadWritesReturns struct {
		result1 error
	}
	replayReadWritesReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateStub        func(*protos.SignedChaincodeResponseMessage, *protos.AttestedData) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 *protos.SignedChaincodeResponseMessage
		arg2 *protos.AttestedData
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Validator) ReplayReadWrites(arg1 shim.ChaincodeStubInterface, arg2 *protos.FPCKVSet) error {
	fake.replayReadWritesMutex.Lock()
	ret, specificReturn := fake.replayReadWritesReturnsOnCall[len(fake.replayReadWritesArgsForCall)]
	fake.replayReadWritesArgsForCall = append(fake.replayReadWritesArgsForCall, struct {
		arg1 shim.ChaincodeStubInterface
		arg2 *protos.FPCKVSet
	}{arg1, arg2})
	stub := fake.ReplayReadWritesStub
	fakeReturns := fake.replayReadWritesReturns
	fake.recordInvocation("ReplayReadWrites", []interface{}{arg1, arg2})
	fake.replayReadWritesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Validator) ReplayReadWritesCallCount() int {
	fake.replayReadWritesMutex.RLock()
	defer fake.replayReadWritesMutex.RUnlock()
	return len(fake.replayReadWritesArgsForCall)
}

func (fake *Validator) ReplayReadWritesCalls(stub func(shim.ChaincodeStubInterface, *protos.FPCKVSet) error) {
	fake.replayReadWritesMutex.Lock()
	defer fake.replayReadWritesMutex.Unlock()
	fake.ReplayReadWritesStub = stub
}

func (fake *Validator) ReplayReadWritesArgsForCall(i int) (shim.ChaincodeStubInterface, *protos.FPCKVSet) {
	fake.replayReadWritesMutex.RLock()
	defer fake.replayReadWritesMutex.RUnlock()
	argsForCall := fake.replayReadWritesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Validator) ReplayReadWritesReturns(result1 error) {
	fake.replayReadWritesMutex.Lock()
	defer fake.replayReadWritesMutex.Unlock()
	fake.ReplayReadWritesStub = nil
	fake.replayReadWritesReturns = struct {
		result1 error
	}{result1}
}

func (fake *Validator) ReplayReadWritesReturnsOnCall(i int, result1 error) {
	fake.replayReadWritesMutex.Lock()
	defer fake.replayReadWritesMutex.Unlock()
	fake.ReplayReadWritesStub = nil
	if fake.replayReadWritesReturnsOnCall == nil {
		fake.replayReadWritesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.replayReadWritesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Validator) Validate(arg1 *protos.SignedChaincodeResponseMessage, arg2 *protos.AttestedData) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 *protos.SignedChaincodeResponseMessage
		arg2 *protos.AttestedData
	}{arg1, arg2})
	stub := fake.ValidateStub
	fakeReturns := fake.validateReturns
	fake.recordInvocation("Validate", []interface{}{arg1, arg2})
	fake.validateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Validator) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *Validator) ValidateCalls(stub func(*protos.SignedChaincodeResponseMessage, *protos.AttestedData) error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *Validator) ValidateArgsForCall(i int) (*protos.SignedChaincodeResponseMessage, *protos.AttestedData) {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Validator) ValidateReturns(result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *Validator) ValidateReturnsOnCall(i int, result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Validator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.replayReadWritesMutex.RLock()
	defer fake.replayReadWritesMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Validator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
